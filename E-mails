# üìß Assistente Pessoal de E-mails em Python (Simula√ß√£o)

Este √© um projeto em Python que simula um assistente pessoal para gerenciar e-mails. Ele serve como um passo inicial para entender como fun√ß√µes podem ser estruturadas para interagir com servi√ßos externos, como uma caixa de entrada de e-mails.

## üöÄ Funcionalidades Atuais (Simuladas)

O assistente possui as seguintes funcionalidades, que operam sobre um conjunto de e-mails simulados em mem√≥ria:

1.  **Obter E-mails**:
    * Filtra e-mails por status (`todos`, `n√£o lidos`, `lidos`).
    * Permite definir a quantidade de e-mails a serem retornados.
    * Suporta filtragem por remetente espec√≠fico.
    * Permite buscar e-mails que contenham palavras-chave no assunto ou conte√∫do.

2.  **Marcar E-mail como Lido/N√£o Lido**:
    * Altera o status de leitura de um e-mail espec√≠fico utilizando seu ID.

3.  **Enviar E-mail**:
    * Simula o envio de um novo e-mail para um destinat√°rio, com assunto e conte√∫do definidos.

## ‚öôÔ∏è Como Rodar o Projeto

### Pr√©-requisitos

Certifique-se de ter o Python instalado em sua m√°quina. Este projeto foi desenvolvido com Python 3.9+.

### Instala√ß√£o

N√£o h√° bibliotecas externas complexas exigidas para a execu√ß√£o b√°sica. Apenas `pydantic` √© utilizada para estruturar as entradas das fun√ß√µes, o que pode ser instalado via pip:

```bash
pip install pydantic

üß† Pr√≥ximos Passos e Poss√≠veis Evolu√ß√µes
Este projeto √© uma base para futuras expans√µes. Algumas ideias para desenvolvimentos futuros incluem:
  - Integra√ß√£o Real com Provedores de E-mail: Substituir as fun√ß√µes simuladas por chamadas a APIs reais de servi√ßos de e-mail (como Gmail API, Microsoft Graph API) ou bibliotecas como imaplib e smtplib para gerenciar e-mails de verdade.
  - Interface de Usu√°rio: Criar uma interface mais amig√°vel (terminal interativo, web ou desktop) para interagir com o assistente.
  - Persist√™ncia de Dados: Salvar o estado dos e-mails (e-mails lidos/n√£o lidos, etc.) em um arquivo (JSON, SQLite) para que as mudan√ßas n√£o sejam perdidas ao fechar o programa.
  -Integra√ß√£o com Modelos de Linguagem (LLMs): Utilizar frameworks como LangChain para permitir intera√ß√£o com o assistente via linguagem natural, transformando comandos de texto em chamadas de fun√ß√£o.

ü§ù Contribui√ß√µes
Sinta-se √† vontade para explorar, modificar e melhorar este projeto! Se tiver sugest√µes ou encontrar problemas, pode abrir uma "issue" ou fazer um "pull request" no reposit√≥rio.

